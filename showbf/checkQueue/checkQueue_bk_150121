#!/bin/bash --login
#############################################################
#
# Get the Comments field from the qstat queue status
# for all jobs currently queued with the current userID
#
# C. Barrass, EPCC 2014
# (based on previous work by A. R. Turner, EPCC 2014)
#
#############################################################

# Get username (use $USER if none supplied)

username=${1:-$USER}

echo
echo =======START checkQueue=======
echo

# Call QSTAT for the current user
# Get the lines from the QSTAT command into an array

IFS=$'\r\n' joblist=($(qstat -u $username))

# Include option to display for all users - if username all used, run qustat without username

if [ $username == "all" ]; then
   IFS=$'\r\n' joblist=($(qstat))
fi

jobcount=0

# Test that we have some data from job list

if [ "${#joblist[@]}" == 0 ]; then
    echo No jobs found for user $username
    echo
    echo ========END checkQueue========
    echo
    exit 0
fi

echo Listing job status comments for all jobs for user $username
echo 

# Initialise flag to indicate if we are in job list
injobs=0

# Itterate through all the jobs found in the queue

for line in "${joblist[@]}"
do
    # Are we currently in the list of jobs?
    if [ $injobs == 0 ]; then
        # No, look for the start of jobs list
        if [[ $line =~ ^---- ]]; then
            injobs=1
        fi
    else
        # Yes, check for end of job list
        if [[ ! $line =~ ^[0-9] ]]; then
            injobs=0
        else 
	    let jobcount+=1
            IFS=' ' read -a tokens <<< "${line}"

            jobno=${tokens[0]}

            usr=${tokens[1]}
            jobname=${tokens[3]}

            if [ $username == "all" ]; then 
               #if user is all then using qstat instead of qstat -u so different order
               usr=${tokens[2]}
               jobname=${tokens[1]}
            fi

            # This is required as the comment sometimes spans 
            # multiple lines. We get all lines that are not 
            # preceded by a TAB character to give the extremes
            # of the comment lines and then print from the start
            # to stop of the comment using sed

            IFS=$'\r\n' comlines=($(qstat -f $jobno | grep -nvP "\t" | grep -A 1 comment))

            if [ "${#comlines[@]}" == 0 ]; then

               # This job does not have a comment
               jobcomment="No comment"

            else
               IFS=' ' read -a tokens <<< "${comlines[0]}"
               start=${tokens[0]}
               start=${start//\:/}

               # Grab some info from this comment line to use in feedback later
               # Depending on status, different info is at different locations in the comment

               rundatetime=`echo ${tokens[6]} ${tokens[7]} ${tokens[8]} ${tokens[9]} ${tokens[10]} `
               notinuser=${tokens[10]}
               notinbudget=${tokens[14]}
               emptybudget=${tokens[10]}

               # Now get second line of comment
               IFS=' ' read -a tokens <<< "${comlines[1]}"
               stop=${tokens[0]}
               stop=${stop//\:/}
               stop=$((stop-1))

               jobcomment=`qstat -f $jobno | sed -n ${start},${stop}p`

               # Remove LF+Tab from end of 1st line comment which now wraps
               jobcomment=`echo $jobcomment | sed -e 's/\n\t//'`
               # Above line removes LF leaving Space+Tab which we now remove
               jobcomment=`echo $jobcomment | sed -e 's/ \t//'`

               # if line was wrapped, need to grab notinbudget from last word in line
               notinbudget=`echo $jobcomment | sed -e 's/.* //g'`

               # Remove line breaks
               jobcomment=`echo $jobcomment | sed -e 's/\n*//g'`
               # Remove common stuff
               jobcomment=`echo $jobcomment | sed -e 's/comment = //g'`
               # Remove tabs
               jobcomment=`echo $jobcomment | sed -e 's/\t*//g'`
               # Remove leading spaces
               jobcomment=`echo $jobcomment | sed -e 's/^[ ]*//'`
            fi

            # Print results for this job truncated to 80 characters
            printf "%12s %12s:  %s\n" $jobno $jobname ${jobcomment::72}

	    # Now print some user friendly info about the jobs based on the comments
            # Paticularly, advise what to do for jobs that will not run without intervention

            if [[ $jobcomment =~ "does not have enough resource"  ]]; then
               printf "%12s %s %s %s %s\n" 'ERROR:' 'Budget' $emptybudget ' has insufficient resource.   User:' $usr 
               printf "%12s %s %s\n" ':' 'Please allocate additional time resource to budget ' $emptybudget 
               printf "%12s %s %s %s\n"  ':' 'or delete job' $jobno 'from the queue.'
               printf "%12s\n" '=========='
            else
               if [[ $jobcomment =~ "is not in"  ]]; then
                  printf "%12s %s %s %s\n"  'ERROR:' $notinuser 'is not a member of budget' $notinbudget
                  printf "%12s %s %s %s %s\n" ':' 'Please either ask the PI to add user ' $notinuser 'to ' $notinbudget
                  printf "%12s %s\n" ':' 'in which case the job will then run automatically'
                  printf "%12s %s\n" ':' 'or delete this job from the queue and resubmit'
                  printf "%12s %s %s %s\n" ':' 'using a budget for which ' $usr ' is a member'
                  printf "%12s\n" '=========='
#               else
#  ### Not sure what extra info we can include here 
#                  if [[ $jobcomment =~ "Job run" ]]; then
#                     printf "%12s %s %s %s\n" ':' $jobno 'was run on' $rundatetime
#                  fi
               fi
            fi
        fi
    fi
done

echo 
echo $jobcount jobs found for user $username
echo
echo Run at $(date +"%Y-%m-%d %H:%M")
echo
echo ========END checkQueue========
echo

exit 0


